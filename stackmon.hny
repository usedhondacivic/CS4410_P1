from synch import *

import list 

# s pointer = node 1 pointer
# node (val, next node pointer)

def Stack(l):
    # returns empty stack
    result = {
        .length: l, 
        .contents: [], 
        .num_push: 0,
        .num_pop: 0,
        .num_val: 0,
        .mutex: Lock(),
        .push_con: Condition(), 
        .pop_con: Condition(), 
        .val_con: Condition()
    }


def push_acquire(s):
    acquire(?(s->mutex))
    while (s->num_pop > 0) or (s->num_val > 0) or (len(s->contents) == s->length):
        wait(?s->push_con, ?s->mutex)
    s->num_push += 1
    release(?(s->mutex))
    
def push_release(s):
    acquire(?(s->mutex))
    s->num_push -= 1
    if s->num_push == 0:
        notify(?s->pop_con)
        notify(?s->val_con)
    release(?(s->mutex))

def push(s, c):
    push_acquire(s)
    csPush: assert countLabel(csPush) == 1
    s->contents = [c,] + s->contents
    push_release(s)


def pop_acquire(s):
    acquire(?(s->mutex))
    while (s->num_push > 0) or (s->num_val > 0) or (s->contents == []):
        wait(?s->pop_con, ?s->mutex)
    s->num_pop += 1
    release(?(s->mutex))

def pop_release(s):
    acquire(?(s->mutex))
    s->num_pop -= 1
    if s->num_pop == 0:
        notify(?s->push_con)
        notify(?s->val_con)
    release(?(s->mutex))


def pop(s):
    pop_acquire(s)
    csPop: assert countLabel(csPop) == 1
    result = (s->contents) 0 
    del (s->contents)[0]
    pop_release(s)

def validate_acquire(s):
    acquire(?(s->mutex))
    while (s->num_pop > 0) or (s->num_push > 0) or (len(s->contents) != s->length):
        wait(?s->val_con, ?s->mutex)
    s->num_val += 1
    release(?(s->mutex))

    
def validate_release(s):
    acquire(?(s->mutex))
    s->num_pop -= 1
    if s->num_pop == 0:
        notify(?s->push_con)
        notify(?s->pop_con)
    release(?(s->mutex))


def validate(s):
    validate_acquire(s)
    csVal: assert countLabel(csVal) == 1
    var open = 0
    var closed = 0
    var valid = True 
    for i in s->contents:
        if i == "(":
            open += 1
        if i == ")":
            closed += 1
        if closed > open:
            valid = False
    if closed != open:
        valid = False
    result = valid
    validate_release(s);